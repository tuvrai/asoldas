@page "/"
@using Microsoft.EntityFrameworkCore
@using DataModel
@inject IDbContextFactory<AsOldAsApp.Data.AsOldAsAppContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web;
@using System.Linq;
@using System.Globalization;



<PageTitle>As old as...</PageTitle>

<div class="date-form">
    <label for="birthDate" class="form-label">Enter your birth date:</label>
    <InputDate @bind-Value="birthDate" class="form-control date-input" id="birthDate" />
    <button type="button" class="btn-submit" @onclick="LoadEvents">Submit</button>
</div>

<div class="row">
    <div class="col-md-4">
        @if (RelevantEvents == null)
        {
            <p>Loading...</p>
        }
        else if (!isInitialized)
        {
            <p class="init-label">Enter the date first and we will display people as old as you when an important event happened!</p>
        }
        else
        {
            <p class="user-age-label">You are <b>@usersAgeInDays</b> days old.</p>
            if (RelevantEvents.Count > 0)
            {

                <ul class="event-list">
                    @for (int i = 0; i <= tolerance; i++)
                    {
                        @if (RelevantEvents.Any(x => x.Dist == i))
                        {
                            @foreach (var item in RelevantEvents.Where(x => x.Dist == i))
                            {
                                <li class="event event-tolerance@(item.Dist)">
                                    <h3>
                                        <span>@GetTextForTolerance(i)</span>
                                        <span>@item.ActualEvent.People.First().FullName</span>
                                        <span>when on @item.ActualEvent.Day.ToString("MMMM d, yyyy", CultureInfo.InvariantCulture)</span><span>...</span>
                                    </h3>
                                    <h2>
                                        <span>@item.ActualEvent.Description</span>
                                    </h2>
                                </li>
                            }
                        }
                    }
                </ul>
            }
            else
            {
                <p class="no-events-label">No events found in next <b>@tolerance</b> days.</p>
            }
        }
    </div>
</div>

@code {
        private DateOnly birthDate = DateOnly.FromDateTime(DateTime.Today);
        private string message;
        private int tolerance = 7;
        private int usersAgeInDays = 0;
        private bool isInitialized = false;

        private string GetTextForTolerance(int tolerance)
        {
            if (tolerance == 0)
            {
                return "Today you are as old as";
            }
            else if (tolerance == 1)
            {
                return "Tommorow you will be as old as";
            }
            else
            {
                return $"In {tolerance} days you will be as old as";
            }
        }


        private async Task LoadEvents()
        {
            isInitialized = true;
            DateTime now = DateTime.Now;
        usersAgeInDays = new DateOnly(now.Year, now.Month, now.Day).DayNumber - birthDate.DayNumber;
        if (AllEvents != null)
        {
            RelevantEvents = AllEvents
                    .Select(x => x.CopyWithPeopleOfAgeWithinTolerance(usersAgeInDays, tolerance))
                    .Where(x => x.HasValue)
                    .Select(x => x!.Value)
                    .ToList();
        }
    }
    public List<WikiEvent>? AllEvents { get; set; } = [];
    public List<(WikiEvent ActualEvent, int Dist)>? RelevantEvents { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        AllEvents = (await context.WikiEvent.Include(e => e.People).Where(x => x.People.Count > 0).ToListAsync()).Where(x => x.IsNonAdultEvent).ToList();
    }
}
